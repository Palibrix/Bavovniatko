# Generated by Django 5.1.5 on 2025-02-21 21:15

import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import suggestions.mixins
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('components', '0006_alter_flightcontroller_options_and_more'),
        ('suggestions', '0007_alter_receiverprotocoltypesuggestion_options_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FlightControllerFirmwareSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.flightcontrollerfirmware')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'FC Firmware Suggestion',
                'verbose_name_plural': 'FC Firmware Suggestions',
                'db_table': 'suggestions_fc_firmware',
                'ordering': ['firmware'],
            },
        ),
        migrations.CreateModel(
            name='FlightControllerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('microcontroller', models.CharField(help_text='Microcontroller Unit', max_length=50, verbose_name='Microcontroller Unit')),
                ('osd', models.CharField(blank=True, help_text='OSD Chip Model', max_length=50, null=True, verbose_name='OSD Chip')),
                ('bluetooth', models.BooleanField(default=False, help_text='Bluetooth Support')),
                ('wifi', models.BooleanField(default=False, help_text='Wifi Support')),
                ('barometer', models.BooleanField(default=False, help_text='Barometer Support')),
                ('connector_type', models.CharField(choices=[('micro', 'Micro-USB'), ('c', 'Type C'), ('another', 'Another')], max_length=50, verbose_name='Connector Type')),
                ('mount_length', models.FloatField(help_text='Length of the FC in mm', verbose_name='FC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the FC in mm', verbose_name='FC mount width, mm')),
                ('weight', models.FloatField(help_text='FC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the FC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the FC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the FC, mm')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('firmwares', models.ManyToManyField(help_text='Compatible firmware types', to='components.flightcontrollerfirmware', verbose_name='Supported Firmwares')),
                ('gyro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.gyro')),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.flightcontroller')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voltage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_power_input', to='components.ratedvoltage', verbose_name='Power Input')),
            ],
            options={
                'verbose_name': 'Flight Controller Suggestion',
                'verbose_name_plural': 'Flight Controller Suggestions',
                'db_table': 'suggestions_flight_controller',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GyroSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('imu', models.CharField(help_text='Inertial Measurement Unit (e.g. MPU6000, BMI270)', max_length=50, verbose_name='Inertial Measurement Unit')),
                ('max_freq', models.FloatField(help_text='Max. Effective Gyro Sampling Frequency, KHz', verbose_name='Maximum Frequency')),
                ('spi_support', models.BooleanField(default=False, verbose_name='SPI Support')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.gyro')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Gyro Suggestion',
                'verbose_name_plural': 'Gyro Suggestions',
                'db_table': 'suggestions_gyro',
                'ordering': ['manufacturer', 'imu'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerFirmwareSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.speedcontrollerfirmware')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ESC Firmware Suggestion',
                'verbose_name_plural': 'ESC Firmware Suggestions',
                'db_table': 'suggestions_esc_firmware',
                'ordering': ['firmware'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerProtocolSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protocol', models.CharField(help_text='Protocol Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.speedcontrollerprotocol')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'ESC Protocol Suggestion',
                'verbose_name_plural': 'ESC Protocol Suggestions',
                'db_table': 'suggestions_esc_protocol',
                'ordering': ['protocol'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('is_wireless_conf', models.BooleanField(default=False, verbose_name='Is Wireless Configuration Available?')),
                ('esc_type', models.CharField(choices=[('all', '4-in-1'), ('single', 'Single')], max_length=50)),
                ('cont_current', models.FloatField(help_text='Continuous current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('burst_current', models.FloatField(help_text='Burst current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('mount_length', models.FloatField(help_text='Length of the ESC in mm', verbose_name='ESC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the ESC in mm', verbose_name='ESC mount width, mm')),
                ('weight', models.FloatField(help_text='ESC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the ESC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the ESC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the ESC, mm')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('firmwares', models.ManyToManyField(help_text='Compatible firmware types', to='components.speedcontrollerfirmware', verbose_name='Supported Firmwares')),
                ('protocols', models.ManyToManyField(help_text='Compatible communication protocols', to='components.speedcontrollerprotocol', verbose_name='Supported Protocols')),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.speedcontroller')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('voltage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_power_input', to='components.ratedvoltage', verbose_name='Power Input')),
            ],
            options={
                'verbose_name': 'Speed Controller Suggestion',
                'verbose_name_plural': 'Speed Controller Suggestions',
                'db_table': 'suggestions_speed_controller',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StackSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('flight_controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.flightcontroller')),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.stack')),
                ('speed_controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.speedcontroller')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Stack Suggestion',
                'verbose_name_plural': 'Stack Suggestions',
                'db_table': 'suggestions_stack',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
    ]
