# Generated by Django 5.1.5 on 2025-01-26 16:43

import components.validators
import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('components', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AntennaSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('center_frequency', models.FloatField(help_text='Center frequency of the antenna')),
                ('bandwidth_min', models.FloatField(help_text='Min. bandwidth (frequency) of the antenna')),
                ('bandwidth_max', models.FloatField(help_text='Max. bandwidth (frequency) of the antenna')),
                ('swr', models.FloatField(blank=True, help_text='SWR of the antenna at Center Frequency (lower=better)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='SWR (VSWR)')),
                ('gain', models.FloatField(blank=True, help_text='Gain of the antenna, in dBi', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('radiation', models.IntegerField(blank=True, help_text='Radiation efficiency of the antenna, in %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AntennaTypeSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of the antenna, e.g. Monopole, Dipole etc.', max_length=50, unique=True)),
                ('direction', models.CharField(choices=[('directional', 'Directional'), ('omni', 'Omni-directional')], default='directional', help_text='Omni-directional: all directions, Directional: one direction.', max_length=50)),
                ('polarization', models.CharField(choices=[('linear', 'Linear, LP'), ('left_circular', 'Left-hand Circular, LHCP'), ('right_circular', 'Right-hand Circular, RHCP')], default='linear', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CameraSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('tvl', models.IntegerField(default=1200, help_text='TVL, or TV Lines - Resolution', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(3000)], verbose_name='TVL')),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(help_text='Voltage Range - Maximal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('ratio', models.CharField(choices=[('4:3', '4:3'), ('16:9', '16:9'), ('another', 'Another'), ('switch', 'Switchable')], default='switch', help_text='Aspect Ratio', max_length=10, verbose_name='Aspect Ratio')),
                ('fov', models.IntegerField(help_text='FOV Horizontally', validators=[components.validators.validate_fov_length], verbose_name='FOV')),
                ('output_type', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', max_length=10, verbose_name='Output Type')),
                ('light_sens', models.CharField(choices=[('unknown', 'Unknown'), ('low', 'Low (0.01 and higher)'), ('normal', 'Normal'), ('high', 'High (0.00001 and below)')], default='unknown', help_text='Higher light sensitivity = Better night vision', max_length=10, verbose_name='Light Sensitivity')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the camera in grams', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Camera Suggestion',
                'verbose_name_plural': 'Camera Suggestions',
                'db_table': 'suggestions_camera',
                'ordering': ['manufacturer', 'model'],
            },
        ),
        migrations.CreateModel(
            name='ExistingAntennaDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Antenna Detail Suggestion',
                'verbose_name_plural': 'Existing Antenna Detail Suggestions',
                'db_table': 'suggestions_existing_antenna_detail',
                'ordering': ['antenna', 'connector_type'],
            },
        ),
        migrations.CreateModel(
            name='ExistingCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Camera Detail Suggestion',
                'verbose_name_plural': 'Existing Camera Detail Suggestions',
                'db_table': 'suggestions_existing_camera_detail',
                'ordering': ['camera'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame Camera Detail Suggestion',
                'verbose_name_plural': 'Existing Frame Camera Detail Suggestions',
                'db_table': 'suggestions_existing_frame_camera_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame Motor Detail Suggestion',
                'verbose_name_plural': 'Existing Frame Motor Detail Suggestions',
                'db_table': 'suggestions_existing_frame_motor_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameVTXDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame VTX Detail Suggestion',
                'verbose_name_plural': 'Existing Frame VTX Detail Suggestions',
                'db_table': 'suggestions_existing_frame_vtx_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='FrameSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('prop_size', models.CharField(help_text='Propeller size in inches', max_length=50, verbose_name='Propeller size')),
                ('size', models.CharField(help_text='Size(Diagonal) of the frame in mm', max_length=50, verbose_name='Frame size')),
                ('weight', models.FloatField(blank=True, help_text='Weight of the frame in grams', null=True)),
                ('material', models.CharField(choices=[('aluminum', 'Aluminium'), ('fibre', 'Carbon fibre'), ('another', 'Another')], max_length=50)),
                ('configuration', models.CharField(choices=[('h', 'H Frame'), ('x', 'X Frame'), ('hybrid', 'Hybrid-X'), ('box', 'Box'), ('another', 'Another')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SuggestedAntennaDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
            ],
            options={
                'verbose_name': 'Suggested Antenna Detail',
                'verbose_name_plural': 'Suggested Antenna Details',
                'db_table': 'suggestions_suggested_antenna_detail',
                'ordering': ['related_instance', 'connector_type'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Camera Detail',
                'verbose_name_plural': 'Suggested Camera Details',
                'db_table': 'suggestions_suggested_camera_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame Camera Detail',
                'verbose_name_plural': 'Suggested Frame Camera Details',
                'db_table': 'suggestions_suggested_frame_camera_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame Motor Detail',
                'verbose_name_plural': 'Suggested Frame Motor Details',
                'db_table': 'suggestions_suggested_frame_motor_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameVTXDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame VTX Detail',
                'verbose_name_plural': 'Suggested Frame VTX Details',
                'db_table': 'suggestions_suggested_frame_vtx_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='VideoFormatSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('format', models.CharField(help_text='Format of the video (e.g. NTSC/PAL)', max_length=50, unique=True, verbose_name='Video Format')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Video Format Suggestion',
                'verbose_name_plural': 'Video Format Suggestions',
                'db_table': 'suggestions_video_format',
                'ordering': ['format'],
            },
        ),
        migrations.CreateModel(
            name='AntennaConnectorSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of antenna connector', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.antennaconnector')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
