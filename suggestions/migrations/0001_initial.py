# Generated by Django 5.1.5 on 2025-02-22 11:15

import components.validators
import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
import suggestions.mixins
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('components', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AntennaSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('center_frequency', models.FloatField(help_text='Center frequency of the antenna')),
                ('bandwidth_min', models.FloatField(help_text='Min. bandwidth (frequency) of the antenna')),
                ('bandwidth_max', models.FloatField(help_text='Max. bandwidth (frequency) of the antenna')),
                ('swr', models.FloatField(blank=True, help_text='SWR of the antenna at Center Frequency (lower=better)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='SWR (VSWR)')),
                ('gain', models.FloatField(blank=True, help_text='Gain of the antenna, in dBi', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('radiation', models.IntegerField(blank=True, help_text='Radiation efficiency of the antenna, in %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='AntennaTypeSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of the antenna, e.g. Monopole, Dipole etc.', max_length=50, unique=True)),
                ('direction', models.CharField(choices=[('directional', 'Directional'), ('omni', 'Omni-directional')], default='directional', help_text='Omni-directional: all directions, Directional: one direction.', max_length=50)),
                ('polarization', models.CharField(choices=[('linear', 'Linear, LP'), ('left_circular', 'Left-hand Circular, LHCP'), ('right_circular', 'Right-hand Circular, RHCP')], default='linear', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CameraSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('tvl', models.IntegerField(default=1200, help_text='TVL, or TV Lines - Resolution', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(3000)], verbose_name='TVL')),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(help_text='Voltage Range - Maximal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('ratio', models.CharField(choices=[('4:3', '4:3'), ('16:9', '16:9'), ('another', 'Another'), ('switch', 'Switchable')], default='switch', help_text='Aspect Ratio', max_length=10, verbose_name='Aspect Ratio')),
                ('fov', models.IntegerField(help_text='FOV Horizontally', validators=[components.validators.validate_fov_length], verbose_name='FOV')),
                ('output_type', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', max_length=10, verbose_name='Output Type')),
                ('light_sens', models.CharField(choices=[('unknown', 'Unknown'), ('low', 'Low (0.01 and higher)'), ('normal', 'Normal'), ('high', 'High (0.00001 and below)')], default='unknown', help_text='Higher light sensitivity = Better night vision', max_length=10, verbose_name='Light Sensitivity')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the camera in grams', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Camera Suggestion',
                'verbose_name_plural': 'Camera Suggestions',
                'db_table': 'suggestions_camera',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ExistingAntennaDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Antenna Detail Suggestion',
                'verbose_name_plural': 'Existing Antenna Detail Suggestions',
                'db_table': 'suggestions_existing_antenna_detail',
                'ordering': ['antenna', 'connector_type'],
            },
        ),
        migrations.CreateModel(
            name='ExistingCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Camera Detail Suggestion',
                'verbose_name_plural': 'Existing Camera Detail Suggestions',
                'db_table': 'suggestions_existing_camera_detail',
                'ordering': ['camera'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame Camera Detail Suggestion',
                'verbose_name_plural': 'Existing Frame Camera Detail Suggestions',
                'db_table': 'suggestions_existing_frame_camera_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame Motor Detail Suggestion',
                'verbose_name_plural': 'Existing Frame Motor Detail Suggestions',
                'db_table': 'suggestions_existing_frame_motor_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='ExistingFrameVTXDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Frame VTX Detail Suggestion',
                'verbose_name_plural': 'Existing Frame VTX Detail Suggestions',
                'db_table': 'suggestions_existing_frame_vtx_detail',
                'ordering': ['frame'],
            },
        ),
        migrations.CreateModel(
            name='ExistingMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Motor weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_power', models.PositiveIntegerField(help_text='Max power, W')),
                ('kv_per_volt', models.PositiveIntegerField(help_text='KV per volt', verbose_name='KV per volt')),
                ('peak_current', models.FloatField(blank=True, help_text='Peak current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('idle_current', models.FloatField(blank=True, help_text='Idle current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('resistance', models.FloatField(blank=True, help_text='Resistance, in mΩ (mOhm)', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Internal Resistance')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Motor Detail Suggestion',
                'verbose_name_plural': 'Existing Motor Detail Suggestions',
                'db_table': 'suggestions_existing_motor_detail',
                'ordering': ['motor'],
            },
        ),
        migrations.CreateModel(
            name='ExistingReceiverDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frequency', models.FloatField(help_text='Frequency, in Mhz', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Frequency')),
                ('weight', models.FloatField(help_text='Weight in grams, without Antenna', validators=[django.core.validators.MinValueValidator(0)])),
                ('telemetry_power', models.FloatField(help_text='Telemetry Power, In dBm', validators=[django.core.validators.MinValueValidator(0)])),
                ('rf_chip', models.CharField(blank=True, help_text='RF Chip Number', max_length=50, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Existing Receiver Detail Suggestion',
                'verbose_name_plural': 'Existing Receiver Detail Suggestions',
                'db_table': 'suggestions_existing_receiver_detail',
                'ordering': ['receiver', 'frequency'],
            },
        ),
        migrations.CreateModel(
            name='FlightControllerFirmwareSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'FC Firmware Suggestion',
                'verbose_name_plural': 'FC Firmware Suggestions',
                'db_table': 'suggestions_fc_firmware',
                'ordering': ['firmware'],
            },
        ),
        migrations.CreateModel(
            name='FlightControllerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('microcontroller', models.CharField(help_text='Microcontroller Unit', max_length=50, verbose_name='Microcontroller Unit')),
                ('osd', models.CharField(blank=True, help_text='OSD Chip Model', max_length=50, null=True, verbose_name='OSD Chip')),
                ('bluetooth', models.BooleanField(default=False, help_text='Bluetooth Support')),
                ('wifi', models.BooleanField(default=False, help_text='Wifi Support')),
                ('barometer', models.BooleanField(default=False, help_text='Barometer Support')),
                ('connector_type', models.CharField(choices=[('micro', 'Micro-USB'), ('c', 'Type C'), ('another', 'Another')], max_length=50, verbose_name='Connector Type')),
                ('mount_length', models.FloatField(help_text='Length of the FC in mm', verbose_name='FC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the FC in mm', verbose_name='FC mount width, mm')),
                ('weight', models.FloatField(help_text='FC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the FC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the FC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the FC, mm')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Flight Controller Suggestion',
                'verbose_name_plural': 'Flight Controller Suggestions',
                'db_table': 'suggestions_flight_controller',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FrameSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('prop_size', models.CharField(help_text='Propeller size in inches', max_length=50, verbose_name='Propeller size')),
                ('size', models.CharField(help_text='Size(Diagonal) of the frame in mm', max_length=50, verbose_name='Frame size')),
                ('weight', models.FloatField(blank=True, help_text='Weight of the frame in grams', null=True)),
                ('material', models.CharField(choices=[('aluminum', 'Aluminium'), ('fibre', 'Carbon fibre'), ('another', 'Another')], max_length=50)),
                ('configuration', models.CharField(choices=[('h', 'H Frame'), ('x', 'X Frame'), ('hybrid', 'Hybrid-X'), ('box', 'Box'), ('another', 'Another')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GyroSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('imu', models.CharField(help_text='Inertial Measurement Unit (e.g. MPU6000, BMI270)', max_length=50, verbose_name='Inertial Measurement Unit')),
                ('max_freq', models.FloatField(help_text='Max. Effective Gyro Sampling Frequency, KHz', verbose_name='Maximum Frequency')),
                ('spi_support', models.BooleanField(default=False, verbose_name='SPI Support')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Gyro Suggestion',
                'verbose_name_plural': 'Gyro Suggestions',
                'db_table': 'suggestions_gyro',
                'ordering': ['manufacturer', 'imu'],
            },
        ),
        migrations.CreateModel(
            name='MotorSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('stator_diameter', models.CharField(help_text='Two first digits of size (e.g. 28 from 2806)', max_length=2, validators=[django.core.validators.MinLengthValidator(2)])),
                ('stator_height', models.CharField(help_text='Two last digits of size (e.g. 06 from 2806 or 06.5 from 2806.5)', max_length=4, validators=[django.core.validators.MinLengthValidator(2)])),
                ('configuration', models.CharField(help_text='Configuration of the motor (e.g. 12N14P)', max_length=50)),
                ('mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Motor Suggestion',
                'verbose_name_plural': 'Motor Suggestions',
                'db_table': 'suggestions_motor',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OutputPowerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('output_power', models.PositiveIntegerField(unique=True, verbose_name='Output Power')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Output Power Suggestion',
                'verbose_name_plural': 'Output Power Suggestions',
                'db_table': 'suggestions_output_power',
                'ordering': ['output_power'],
            },
        ),
        migrations.CreateModel(
            name='PropellerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('size', models.IntegerField(help_text='Size of the propeller in inches', validators=[django.core.validators.MinValueValidator(2)], verbose_name='Size')),
                ('pitch', models.FloatField(help_text='Pitch of the propeller in inches', verbose_name='Pitch')),
                ('blade_count', models.CharField(choices=[('2', '2 blades'), ('3', '3 blades'), ('4', '4 blades'), ('5', '5 blades'), ('6', '6 blades'), ('7', '7 blades'), ('8', '8 blades'), ('another', 'Another')], help_text='Number of propeller blades', max_length=8, verbose_name='Blade Count')),
                ('weight', models.FloatField(blank=True, help_text='Weight of propeller in grams', null=True, verbose_name='Weight')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Propeller Suggestion',
                'verbose_name_plural': 'Propeller Suggestions',
                'db_table': 'suggestions_propeller',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RatedVoltageSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('min_cells', models.IntegerField(default=1, help_text='Number of min. possible quantity of cells in series', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Min. number of cells')),
                ('max_cells', models.IntegerField(default=1, help_text='Number of max. possible quantity of cells in series', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max. number of cells')),
                ('type', models.CharField(choices=[('LIPO', 'LiPo'), ('LI_ION', 'Li-Ion'), ('LIHV', 'LiHV'), ('ANOTHER', 'Another')], default='LIPO', max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Rated Voltage Suggestion',
                'verbose_name_plural': 'Rated Voltage Suggestions',
                'db_table': 'suggestions_rated_voltage',
                'ordering': ['min_cells', 'max_cells'],
            },
        ),
        migrations.CreateModel(
            name='ReceiverProtocolTypeSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Rx To FC', max_length=50, unique=True, verbose_name='Output Protocol Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Receiver Protocol Type Suggestion',
                'verbose_name_plural': 'Receiver Protocol Type Suggestions',
                'db_table': 'suggestions_receiver_protocol_type',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='ReceiverSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('processor', models.CharField(blank=True, help_text='Name of the processor(MCU)', max_length=100, null=True)),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(blank=True, help_text='Voltage Range - Maximal Voltage, optional', null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Receiver Suggestion',
                'verbose_name_plural': 'Receiver Suggestions',
                'db_table': 'suggestions_receiver',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SpeedControllerFirmwareSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'ESC Firmware Suggestion',
                'verbose_name_plural': 'ESC Firmware Suggestions',
                'db_table': 'suggestions_esc_firmware',
                'ordering': ['firmware'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerProtocolSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protocol', models.CharField(help_text='Protocol Type', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'ESC Protocol Suggestion',
                'verbose_name_plural': 'ESC Protocol Suggestions',
                'db_table': 'suggestions_esc_protocol',
                'ordering': ['protocol'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('is_wireless_conf', models.BooleanField(default=False, verbose_name='Is Wireless Configuration Available?')),
                ('esc_type', models.CharField(choices=[('all', '4-in-1'), ('single', 'Single')], max_length=50)),
                ('cont_current', models.FloatField(help_text='Continuous current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('burst_current', models.FloatField(help_text='Burst current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('mount_length', models.FloatField(help_text='Length of the ESC in mm', verbose_name='ESC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the ESC in mm', verbose_name='ESC mount width, mm')),
                ('weight', models.FloatField(help_text='ESC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the ESC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the ESC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the ESC, mm')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Speed Controller Suggestion',
                'verbose_name_plural': 'Speed Controller Suggestions',
                'db_table': 'suggestions_speed_controller',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StackSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Stack Suggestion',
                'verbose_name_plural': 'Stack Suggestions',
                'db_table': 'suggestions_stack',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SuggestedAntennaDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
            ],
            options={
                'verbose_name': 'Suggested Antenna Detail',
                'verbose_name_plural': 'Suggested Antenna Details',
                'db_table': 'suggestions_suggested_antenna_detail',
                'ordering': ['related_instance', 'connector_type'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Camera Detail',
                'verbose_name_plural': 'Suggested Camera Details',
                'db_table': 'suggestions_suggested_camera_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameCameraDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame Camera Detail',
                'verbose_name_plural': 'Suggested Frame Camera Details',
                'db_table': 'suggestions_suggested_frame_camera_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame Motor Detail',
                'verbose_name_plural': 'Suggested Frame Motor Details',
                'db_table': 'suggestions_suggested_frame_motor_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedFrameVTXDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
            ],
            options={
                'verbose_name': 'Suggested Frame VTX Detail',
                'verbose_name_plural': 'Suggested Frame VTX Details',
                'db_table': 'suggestions_suggested_frame_vtx_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedMotorDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Motor weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_power', models.PositiveIntegerField(help_text='Max power, W')),
                ('kv_per_volt', models.PositiveIntegerField(help_text='KV per volt', verbose_name='KV per volt')),
                ('peak_current', models.FloatField(blank=True, help_text='Peak current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('idle_current', models.FloatField(blank=True, help_text='Idle current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('resistance', models.FloatField(blank=True, help_text='Resistance, in mΩ (mOhm)', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Internal Resistance')),
            ],
            options={
                'verbose_name': 'Suggested Motor Detail',
                'verbose_name_plural': 'Suggested Motor Details',
                'db_table': 'suggestions_suggested_motor_detail',
                'ordering': ['related_instance'],
            },
        ),
        migrations.CreateModel(
            name='SuggestedReceiverDetailSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frequency', models.FloatField(help_text='Frequency, in Mhz', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Frequency')),
                ('weight', models.FloatField(help_text='Weight in grams, without Antenna', validators=[django.core.validators.MinValueValidator(0)])),
                ('telemetry_power', models.FloatField(help_text='Telemetry Power, In dBm', validators=[django.core.validators.MinValueValidator(0)])),
                ('rf_chip', models.CharField(blank=True, help_text='RF Chip Number', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Suggested Receiver Detail',
                'verbose_name_plural': 'Suggested Receiver Details',
                'db_table': 'suggestions_suggested_receiver_detail',
                'ordering': ['related_instance', 'frequency'],
            },
        ),
        migrations.CreateModel(
            name='TransmitterSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('input_voltage_min', models.FloatField(help_text='Operating Voltage Range - Min. Input Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Min. Input Voltage')),
                ('input_voltage_max', models.FloatField(help_text='Operating Voltage Range - Max. Input Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Max. Input Voltage')),
                ('output_voltage', models.FloatField(help_text='Output Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Output Voltage')),
                ('channels_quantity', models.PositiveIntegerField(help_text='Channels Quantity', verbose_name='Channels Quantity')),
                ('output', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', help_text='Output Type', max_length=10, verbose_name='Output Type')),
                ('max_power', models.PositiveIntegerField(help_text='Max. VTX Power', verbose_name='Max. VTX Power')),
                ('microphone', models.BooleanField(default=True, help_text='Has Microphone?', verbose_name='Built-in Microphone?')),
                ('length', models.FloatField(help_text='Length of the item, mm')),
                ('height', models.FloatField(help_text='Height of the item, mm')),
                ('thickness', models.FloatField(help_text='Thickness of the item, mm')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the transmitter in grams', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Transmitter Suggestion',
                'verbose_name_plural': 'Transmitter Suggestions',
                'db_table': 'suggestions_transmitter',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(suggestions.mixins.MediaHandlerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VideoFormatSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('format', models.CharField(help_text='Format of the video (e.g. NTSC/PAL)', max_length=50, unique=True, verbose_name='Video Format')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Video Format Suggestion',
                'verbose_name_plural': 'Video Format Suggestions',
                'db_table': 'suggestions_video_format',
                'ordering': ['format'],
            },
        ),
        migrations.CreateModel(
            name='AntennaConnectorSuggestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of antenna connector', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('denied', 'Denied')], default='pending', max_length=20)),
                ('admin_comment', models.TextField(blank=True, null=True)),
                ('request_description', models.TextField(blank=True, null=True)),
                ('related_instance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='submitted_suggestions', to='components.antennaconnector')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
