# Generated by Django 5.0.4 on 2024-05-03 11:43

import components.mixins
import components.validators
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AntennaConnector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='Type of antenna connector', max_length=50)),
                ('is_public', models.BooleanField(default=False, help_text='Is public?')),
            ],
            options={
                'verbose_name': 'Antenna Connector',
                'verbose_name_plural': 'Antenna Connectors',
                'db_table': 'components_antenna_connector',
                'ordering': ['type', '-is_public'],
            },
        ),
        migrations.CreateModel(
            name='AntennaType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='Type of antenna', max_length=50)),
                ('direction', models.CharField(choices=[('directional', 'Directional'), ('omni', 'Omni-directional')], default='directional', help_text='Omni-directional: all directions, Directional: one direction.', max_length=50)),
                ('polarization', models.CharField(choices=[('linear', 'Linear, LP'), ('circular', 'Circular')], default='linear', max_length=50)),
                ('is_public', models.BooleanField(default=False, help_text='Is public?')),
            ],
            options={
                'verbose_name': 'Antenna',
                'verbose_name_plural': 'Antennas',
                'db_table': 'components_antenna_type',
                'ordering': ['type'],
            },
            bases=(models.Model, components.mixins.UniqueItemConstraintMixin),
        ),
        migrations.CreateModel(
            name='ReceiverProtocolType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(help_text='Rx To FC', max_length=50, verbose_name='Output Protocol Type')),
                ('is_public', models.BooleanField(default=False, help_text='Is public?')),
            ],
            options={
                'verbose_name': 'Receiver Protocol Type',
                'verbose_name_plural': 'Receiver Protocol Types',
                'db_table': 'components_receiver_protocol_type',
                'ordering': ['type', '-is_public'],
            },
        ),
        migrations.CreateModel(
            name='Antenna',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('center_frequency', models.FloatField(help_text='Center frequency of the antenna')),
                ('bandwidth_min', models.FloatField(help_text='Minimum bandwidth (frequency) of the antenna')),
                ('bandwidth_max', models.FloatField(help_text='Maximum bandwidth (frequency) of the antenna')),
                ('swr', models.FloatField(blank=True, help_text='SWR of the antenna at Center Frequency (lower=better)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='SWR (VSWR)')),
                ('gain', models.FloatField(help_text='Gain of the antenna, in dBi', validators=[django.core.validators.MinValueValidator(0)])),
                ('radiation', models.IntegerField(help_text='Radiation efficiency of the antenna, in %', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('user', models.ForeignKey(blank=True, help_text='Public if empty', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='components.antennatype')),
            ],
            options={
                'verbose_name': 'Antenna',
                'verbose_name_plural': 'Antennas',
                'db_table': 'components_antenna',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(models.Model, components.mixins.UniqueConstraintMixin),
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('tvl', models.IntegerField(default=1200, help_text='TVL, or TV Lines - Resolution', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(3000)], verbose_name='TVL')),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(help_text='Voltage Range - Maximal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('ratio', models.CharField(choices=[('4:3', '4:3'), ('16:9', '16:9'), ('switch', 'Switchable')], default='switch', help_text='Aspect Ratio', max_length=10, verbose_name='Aspect Ratio')),
                ('fov', models.IntegerField(help_text='FOV Horizontally', validators=[components.validators.validate_fov_length], verbose_name='FOV')),
                ('output_type', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', max_length=10, verbose_name='Output Type')),
                ('light_sens', models.CharField(choices=[('unknown', 'Unknown'), ('low', 'Low (0.01 and higher)'), ('normal', 'Normal'), ('high', 'High (0.00001 and below)')], default='unknown', help_text='Higher light sensitivity = Better night vision', max_length=10, verbose_name='Light Sensitivity')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the camera in grams', null=True)),
                ('user', models.ForeignKey(blank=True, help_text='Public if empty', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Camera',
                'verbose_name_plural': 'Cameras',
                'db_table': 'components_camera',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(models.Model, components.mixins.UniqueConstraintMixin),
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('prop_size', models.CharField(help_text='Propeller size in inches', max_length=50, verbose_name='Propeller size')),
                ('size', models.CharField(blank=True, help_text='Size(Diagonal) of the frame in mm', max_length=50, null=True, verbose_name='Frame size')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the frame in grams', null=True)),
                ('material', models.CharField(blank=True, choices=[('aluminum', 'Aluminium'), ('fibre', 'Carbon fibre')], max_length=50, null=True)),
                ('configuration', models.CharField(blank=True, choices=[('h', 'H Frame'), ('x', 'X Frame'), ('hybrid', 'Hybrid-X'), ('box', 'Box')], max_length=50, null=True)),
                ('user', models.ForeignKey(blank=True, help_text='Public if empty', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Frame',
                'verbose_name_plural': 'Frames',
                'db_table': 'components_frame',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(models.Model, components.mixins.UniqueConstraintMixin),
        ),
        migrations.CreateModel(
            name='Propeller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('size', models.IntegerField(help_text='Size of the propeller in inches', validators=[django.core.validators.MinValueValidator(2)])),
                ('pitch', models.FloatField(help_text='Pitch of the propeller in inches')),
                ('blade_count', models.CharField(choices=[('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('another', 'Another')], max_length=8)),
                ('weight', models.FloatField(blank=True, help_text='Weight of propeller in grams', null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Propeller',
                'verbose_name_plural': 'Propellers',
                'db_table': 'components_propeller',
                'ordering': ['model'],
            },
            bases=(models.Model, components.mixins.UniqueConstraintMixin),
        ),
        migrations.CreateModel(
            name='Receiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('processor', models.CharField(blank=True, help_text='Name of the processor', max_length=100, null=True)),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(blank=True, help_text='Voltage Range - Maximal Voltage', null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('antenna_connector', models.ManyToManyField(to='components.antennaconnector')),
                ('user', models.ForeignKey(blank=True, help_text='Public if empty', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('protocol', models.ManyToManyField(help_text='Rx To FC', to='components.receiverprotocoltype', verbose_name='Output Protocol')),
            ],
            options={
                'verbose_name': 'Receiver',
                'verbose_name_plural': 'Receivers',
                'db_table': 'components_receiver',
                'ordering': ['manufacturer', 'model'],
            },
            bases=(models.Model, components.mixins.UniqueConstraintMixin),
        ),
        migrations.CreateModel(
            name='AntennaDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
                ('antenna', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='antenna_details', to='components.antenna')),
                ('connector_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='components.antennaconnector')),
            ],
            options={
                'verbose_name': 'Antenna Detail',
                'verbose_name_plural': 'Antenna Details',
                'db_table': 'components_antenna_detail',
                'ordering': ['antenna', 'connector_type'],
                'unique_together': {('antenna', 'connector_type', 'angle_type')},
            },
        ),
        migrations.CreateModel(
            name='CameraDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_details', to='components.camera')),
            ],
            options={
                'verbose_name': 'Camera Detail',
                'verbose_name_plural': 'Camera Details',
                'db_table': 'components_camera_detail',
                'unique_together': {('camera', 'height', 'width')},
            },
        ),
        migrations.CreateModel(
            name='FrameDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='frame_details', to='components.frame')),
            ],
            options={
                'verbose_name': 'FrameDetail',
                'verbose_name_plural': 'FrameDetails',
                'db_table': 'components_frame_detail',
                'ordering': ('frame__manufacturer', 'frame__model'),
                'unique_together': {('frame', 'camera_mount_height', 'camera_mount_width', 'motor_mount_height', 'motor_mount_width', 'vtx_mount_height', 'vtx_mount_width')},
            },
        ),
        migrations.CreateModel(
            name='ReceiverDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('weight', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('telemetry_power', models.FloatField(help_text='Telemetry Power, In dBm', validators=[django.core.validators.MinValueValidator(0)])),
                ('rf_chip', models.CharField(blank=True, help_text='RF Chip Number', max_length=50, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='receiver_details', to='components.receiver')),
            ],
            options={
                'verbose_name': 'Receiver Detail',
                'verbose_name_plural': 'Receiver Details',
                'db_table': 'components_receiver_detail',
                'ordering': ['receiver', 'frequency', 'weight', 'telemetry_power', 'rf_chip'],
                'unique_together': {('receiver', 'frequency', 'weight', 'telemetry_power', 'rf_chip')},
            },
        ),
    ]
