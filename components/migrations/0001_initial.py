# Generated by Django 5.1.2 on 2024-10-10 21:30

import components.validators
import django.core.validators
import django.db.models.deletion
import django_ckeditor_5.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AntennaConnector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of antenna connector', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'Antenna Connector',
                'verbose_name_plural': 'Antenna Connectors',
                'db_table': 'components_antenna_connector',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='Battery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('series', models.PositiveSmallIntegerField(help_text='Number of cells in series, e.g. 6 from 6S3P', verbose_name='Cells in series')),
                ('parallels', models.PositiveSmallIntegerField(help_text='Number of cells in parallels, e.g. 3 form 6S3P', verbose_name='Cells in parallels')),
                ('size', models.CharField(help_text='Size of individual battery (e.g. 18650)', max_length=5, validators=[django.core.validators.MinLengthValidator(5)])),
                ('type', models.CharField(choices=[('LIPO', 'LiPo'), ('LI_ION', 'Li-Ion'), ('LIHV', 'LiHV'), ('ANOTHER', 'Another')], default='LIPO', max_length=10)),
                ('connector_type', models.CharField(blank=True, help_text='Power Connector Type (e.g. XT60)', max_length=50, null=True, verbose_name='Power Connector')),
                ('balancer', models.CharField(blank=True, help_text='Charge Balancer, e.g. JST XH-7 pin', max_length=50, null=True, verbose_name='Charge Balancer')),
                ('capacity', models.IntegerField(help_text='Battery Capacity, mAh', verbose_name='Battery Capacity, mAh')),
                ('voltage', models.FloatField(help_text='Rated Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Rated Voltage, V')),
                ('discharge_current', models.IntegerField(help_text='Max. discharge current, A', verbose_name='Max. discharge current')),
                ('charge_current', models.IntegerField(help_text='Max. charge current, A', verbose_name='Max. charge current')),
                ('weight', models.FloatField(help_text='Weight oh the camera in grams')),
                ('length', models.FloatField(help_text='Length of the battery, mm')),
                ('height', models.FloatField(help_text='Height of the battery, mm')),
                ('width', models.FloatField(help_text='Width of the battery, mm')),
            ],
            options={
                'verbose_name': 'Battery',
                'verbose_name_plural': 'Batteries',
                'db_table': 'components_battery',
                'ordering': ('size', 'capacity'),
            },
        ),
        migrations.CreateModel(
            name='FlightControllerFirmware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type (e.g. BetaFlight, OneShot125)', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'FC Firmware',
                'verbose_name_plural': 'FC Firmwares',
                'db_table': 'components_fc_firmware',
            },
        ),
        migrations.CreateModel(
            name='Motor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('stator_diameter', models.CharField(help_text='Two first digits of size (e.g. 28 from 2806)', max_length=2, validators=[django.core.validators.MinValueValidator(2)])),
                ('stator_height', models.CharField(help_text='Two last digits of size (e.g. 06 from 2806 or 06.5 from 2806.5)', max_length=4, validators=[django.core.validators.MinValueValidator(2)])),
                ('configuration', models.CharField(help_text='Configuration of the motor (e.g. 12N14P)', max_length=50)),
                ('mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
            ],
            options={
                'verbose_name': 'Motor',
                'verbose_name_plural': 'Motors',
                'db_table': 'components_motor',
                'ordering': ['manufacturer', 'model'],
            },
        ),
        migrations.CreateModel(
            name='OutputPower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('output_power', models.PositiveIntegerField(unique=True, verbose_name='Output Power')),
            ],
            options={
                'verbose_name': 'Output Power',
                'verbose_name_plural': 'Output Powers',
                'db_table': 'components_output_power',
            },
        ),
        migrations.CreateModel(
            name='Propeller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('size', models.IntegerField(help_text='Size of the propeller in inches', validators=[django.core.validators.MinValueValidator(2)])),
                ('pitch', models.FloatField(help_text='Pitch of the propeller in inches')),
                ('blade_count', models.CharField(choices=[('2', '2'), ('3', '3'), ('4', '4'), ('5', '5'), ('6', '6'), ('7', '7'), ('8', '8'), ('another', 'Another')], max_length=8)),
                ('weight', models.FloatField(blank=True, help_text='Weight of propeller in grams', null=True)),
            ],
            options={
                'verbose_name': 'Propeller',
                'verbose_name_plural': 'Propellers',
                'db_table': 'components_propeller',
            },
        ),
        migrations.CreateModel(
            name='ReceiverProtocolType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Rx To FC', max_length=50, verbose_name='Output Protocol Type')),
            ],
            options={
                'verbose_name': 'Receiver Protocol Type',
                'verbose_name_plural': 'Receiver Protocol Types',
                'db_table': 'components_receiver_protocol_type',
                'ordering': ['type'],
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerFirmware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('firmware', models.CharField(help_text='Firmware Type (e.g. BLHeli_S, AM32)', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'ESC Firmware',
                'verbose_name_plural': 'ESC Firmwares',
                'db_table': 'components_esc_firmware',
            },
        ),
        migrations.CreateModel(
            name='SpeedControllerProtocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('protocol', models.CharField(help_text='Firmware Type (e.g. DShot150 , DShot300 )', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'ESC Protocol',
                'verbose_name_plural': 'ESC Protocols',
                'db_table': 'components_esc_protocol',
            },
        ),
        migrations.CreateModel(
            name='VideoFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('format', models.CharField(help_text='Format of the video (e.g. NTSC/PAL)', max_length=50, unique=True, verbose_name='Video Format')),
            ],
            options={
                'verbose_name': 'Video Format',
                'verbose_name_plural': 'Video Formats',
                'db_table': 'components_video_format',
            },
        ),
        migrations.CreateModel(
            name='AntennaType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('type', models.CharField(help_text='Type of the antenna', max_length=50)),
                ('direction', models.CharField(choices=[('directional', 'Directional'), ('omni', 'Omni-directional')], default='directional', help_text='Omni-directional: all directions, Directional: one direction.', max_length=50)),
                ('polarization', models.CharField(choices=[('linear', 'Linear, LP'), ('left_circular', 'Left-hand Circular, LHCP'), ('right_circular', 'Right-hand Circular, RHCP')], default='linear', max_length=50)),
            ],
            options={
                'verbose_name': 'Antenna Type',
                'verbose_name_plural': 'Antenna Types',
                'db_table': 'components_antenna_type',
                'ordering': ['type'],
                'unique_together': {('type', 'direction', 'polarization')},
            },
        ),
        migrations.CreateModel(
            name='Antenna',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('center_frequency', models.FloatField(help_text='Center frequency of the antenna')),
                ('bandwidth_min', models.FloatField(help_text='Min. bandwidth (frequency) of the antenna')),
                ('bandwidth_max', models.FloatField(help_text='Max. bandwidth (frequency) of the antenna')),
                ('swr', models.FloatField(blank=True, help_text='SWR of the antenna at Center Frequency (lower=better)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)], verbose_name='SWR (VSWR)')),
                ('gain', models.FloatField(blank=True, help_text='Gain of the antenna, in dBi', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('radiation', models.IntegerField(blank=True, help_text='Radiation efficiency of the antenna, in %', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='components.antennatype')),
            ],
            options={
                'verbose_name': 'Antenna',
                'verbose_name_plural': 'Antennas',
                'db_table': 'components_antenna',
                'ordering': ['manufacturer', 'model'],
                'unique_together': {('manufacturer', 'model')},
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('prop_size', models.CharField(help_text='Propeller size in inches', max_length=50, verbose_name='Propeller size')),
                ('size', models.CharField(help_text='Size(Diagonal) of the frame in mm', max_length=50, verbose_name='Frame size')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the frame in grams', null=True)),
                ('material', models.CharField(choices=[('aluminum', 'Aluminium'), ('fibre', 'Carbon fibre'), ('another', 'Another')], max_length=50)),
                ('configuration', models.CharField(choices=[('h', 'H Frame'), ('x', 'X Frame'), ('hybrid', 'Hybrid-X'), ('box', 'Box'), ('another', 'Another')], max_length=50)),
            ],
            options={
                'verbose_name': 'Frame',
                'verbose_name_plural': 'Frames',
                'db_table': 'components_frame',
                'ordering': ['manufacturer', 'model'],
                'unique_together': {('manufacturer', 'model')},
            },
        ),
        migrations.CreateModel(
            name='Gyro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('imu', models.CharField(help_text='Inertial Measurement Unit (e.g. MPU6000, BMI270)', max_length=50, verbose_name='Inertial Measurement Unit')),
                ('max_freq', models.FloatField(help_text='Max. Effective Gyro Sampling Frequency, KHz', max_length=50, verbose_name='Maximum Frequency')),
                ('spi_support', models.BooleanField(default=False, verbose_name='SPI Support')),
            ],
            options={
                'verbose_name': 'Gyro',
                'verbose_name_plural': 'Gyros',
                'db_table': 'components_gyro',
                'unique_together': {('manufacturer', 'imu', 'max_freq')},
            },
        ),
        migrations.CreateModel(
            name='RatedVoltage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('min_cells', models.IntegerField(default=1, help_text='Number of min. possible quantity of cells in series', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Min. number of cells')),
                ('max_cells', models.IntegerField(default=1, help_text='Number of max. possible quantity of cells in series', validators=[django.core.validators.MinValueValidator(1)], verbose_name='Max. number of cells')),
                ('type', models.CharField(choices=[('LIPO', 'LiPo'), ('LI_ION', 'Li-Ion'), ('LIHV', 'LiHV'), ('ANOTHER', 'Another')], default='LIPO', max_length=10)),
            ],
            options={
                'verbose_name': 'Rated Voltage',
                'verbose_name_plural': 'Rated Voltages',
                'db_table': 'components_rated_voltage',
                'unique_together': {('min_cells', 'max_cells', 'type')},
            },
        ),
        migrations.CreateModel(
            name='FlightController',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('microcontroller', models.CharField(help_text='Microcontroller Unit', max_length=50, verbose_name='Microcontroller Unit')),
                ('osd', models.CharField(blank=True, help_text='OSD Chip Model', max_length=50, null=True, verbose_name='OSD Chip')),
                ('bluetooth', models.BooleanField(default=False, help_text='Bluetooth Support')),
                ('wifi', models.BooleanField(default=False, help_text='Wifi Support')),
                ('barometer', models.BooleanField(default=False, help_text='Barometer Support')),
                ('connector_type', models.CharField(choices=[('micro', 'Micro-USB'), ('c', 'Type C'), ('another', 'Another')], max_length=50, verbose_name='Connector Type')),
                ('mount_length', models.FloatField(help_text='Length of the FC in mm', max_length=5, verbose_name='FC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the FC in mm', max_length=5, verbose_name='FC mount width, mm')),
                ('weight', models.FloatField(help_text='FC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the FC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the FC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the FC, mm')),
                ('firmwares', models.ManyToManyField(to='components.flightcontrollerfirmware')),
                ('gyro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.gyro')),
                ('voltage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fc_power_input', to='components.ratedvoltage', verbose_name='Power Input')),
            ],
            options={
                'verbose_name': 'Flight Controller',
                'verbose_name_plural': 'Flight Controllers',
                'db_table': 'components_fc',
            },
        ),
        migrations.CreateModel(
            name='Receiver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('processor', models.CharField(blank=True, help_text='Name of the processor(MCU)', max_length=100, null=True)),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(blank=True, help_text='Voltage Range - Maximal Voltage, optional', null=True, validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('antenna_connector', models.ManyToManyField(to='components.antennaconnector')),
                ('protocol', models.ManyToManyField(help_text='Rx To FC', to='components.receiverprotocoltype', verbose_name='Output Protocol')),
            ],
            options={
                'verbose_name': 'Receiver',
                'verbose_name_plural': 'Receivers',
                'db_table': 'components_receiver',
                'ordering': ['manufacturer', 'model'],
            },
        ),
        migrations.CreateModel(
            name='SpeedController',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('is_wireless_conf', models.BooleanField(default=False, verbose_name='Is Wireless Configuration Available?')),
                ('esc_type', models.CharField(choices=[('all', '4-in-1'), ('single', 'Single')], max_length=50)),
                ('cont_current', models.FloatField(help_text='Continuous current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('burst_current', models.FloatField(help_text='Burst current, A', validators=[django.core.validators.MinValueValidator(0)])),
                ('mount_length', models.FloatField(help_text='Length of the ESC in mm', max_length=5, verbose_name='ESC mount Length, mm')),
                ('mount_width', models.FloatField(help_text='Width of the ESC in mm', max_length=5, verbose_name='ESC mount width, mm')),
                ('weight', models.FloatField(help_text='ESC weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('length', models.FloatField(help_text='Length of the ESC, mm')),
                ('height', models.FloatField(blank=True, help_text='Height of the ESC, mm', null=True)),
                ('width', models.FloatField(help_text='Width of the ESC, mm')),
                ('voltage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='esc_power_input', to='components.ratedvoltage', verbose_name='Power Input')),
                ('firmwares', models.ManyToManyField(to='components.speedcontrollerfirmware')),
                ('protocols', models.ManyToManyField(to='components.speedcontrollerprotocol')),
            ],
            options={
                'verbose_name': 'Speed Controller',
                'verbose_name_plural': 'Speed Controllers',
                'db_table': 'components_esc',
            },
        ),
        migrations.CreateModel(
            name='Stack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('flight_controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.flightcontroller')),
                ('speed_controller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='components.speedcontroller')),
            ],
            options={
                'verbose_name': 'Stack',
                'verbose_name_plural': 'Stacks',
                'db_table': 'components_stack',
            },
        ),
        migrations.CreateModel(
            name='Transmitter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('input_voltage_min', models.FloatField(help_text='Operating Voltage Range - Min. Input Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Min. Input Voltage')),
                ('input_voltage_max', models.FloatField(help_text='Operating Voltage Range - Max. Input Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Max. Input Voltage')),
                ('output_voltage', models.FloatField(help_text='Output Voltage', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Output Voltage')),
                ('channels_quantity', models.IntegerField(help_text='Channels Quantity', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Channels Quantity')),
                ('output', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', help_text='Output Type', max_length=10, verbose_name='Output Type')),
                ('max_power', models.PositiveIntegerField(help_text='Max. VTX Power', verbose_name='Max. VTX Power')),
                ('microphone', models.BooleanField(default=True, help_text='Has Microphone?', verbose_name='Built-in Microphone?')),
                ('length', models.FloatField(help_text='Length of the item, mm')),
                ('height', models.FloatField(help_text='Height of the item, mm')),
                ('thickness', models.FloatField(help_text='Thickness of the item, mm')),
                ('antenna_connectors', models.ManyToManyField(to='components.antennaconnector')),
                ('output_powers', models.ManyToManyField(to='components.outputpower', verbose_name='Output Powers')),
                ('video_formats', models.ManyToManyField(to='components.videoformat')),
            ],
            options={
                'verbose_name': 'Transmitter',
                'verbose_name_plural': 'Transmitters',
                'db_table': 'components_transmitter',
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('manufacturer', models.CharField(max_length=50)),
                ('model', models.CharField(help_text='Full name of the item', max_length=50)),
                ('description', django_ckeditor_5.fields.CKEditor5Field(blank=True, help_text='Long description of the item', verbose_name='Text')),
                ('tvl', models.IntegerField(default=1200, help_text='TVL, or TV Lines - Resolution', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(3000)], verbose_name='TVL')),
                ('voltage_min', models.FloatField(help_text='Voltage Range - Minimal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Minimal Voltage')),
                ('voltage_max', models.FloatField(help_text='Voltage Range - Maximal Voltage', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(28)], verbose_name='Maximal Voltage')),
                ('ratio', models.CharField(choices=[('4:3', '4:3'), ('16:9', '16:9'), ('another', 'Another'), ('switch', 'Switchable')], default='switch', help_text='Aspect Ratio', max_length=10, verbose_name='Aspect Ratio')),
                ('fov', models.IntegerField(help_text='FOV Horizontally', validators=[components.validators.validate_fov_length], verbose_name='FOV')),
                ('output_type', models.CharField(choices=[('A', 'Analog'), ('D', 'Digital')], default='A', max_length=10, verbose_name='Output Type')),
                ('light_sens', models.CharField(choices=[('unknown', 'Unknown'), ('low', 'Low (0.01 and higher)'), ('normal', 'Normal'), ('high', 'High (0.00001 and below)')], default='unknown', help_text='Higher light sensitivity = Better night vision', max_length=10, verbose_name='Light Sensitivity')),
                ('weight', models.FloatField(blank=True, help_text='Weight oh the camera in grams', null=True)),
                ('video_formats', models.ManyToManyField(to='components.videoformat')),
            ],
            options={
                'verbose_name': 'Camera',
                'verbose_name_plural': 'Cameras',
                'db_table': 'components_camera',
                'ordering': ['manufacturer', 'model'],
                'unique_together': {('manufacturer', 'model')},
            },
        ),
        migrations.CreateModel(
            name='AntennaDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Weight of the antenna in grams')),
                ('angle_type', models.CharField(choices=[('angled', 'Angled'), ('straight', 'Straight')], default='straight', help_text='Angled or Straight', max_length=50)),
                ('antenna', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='components.antenna')),
                ('connector_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='components.antennaconnector')),
            ],
            options={
                'verbose_name': 'Antenna Detail',
                'verbose_name_plural': 'Antenna Details',
                'db_table': 'components_antenna_detail',
                'ordering': ['antenna', 'connector_type'],
                'unique_together': {('antenna', 'connector_type', 'angle_type')},
            },
        ),
        migrations.CreateModel(
            name='CameraDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='components.camera')),
            ],
            options={
                'verbose_name': 'Camera Detail',
                'verbose_name_plural': 'Camera Details',
                'db_table': 'components_camera_detail',
                'unique_together': {('camera', 'height', 'width')},
            },
        ),
        migrations.CreateModel(
            name='FrameCameraDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera_mount_height', models.FloatField(help_text='Height of the camera in mm', max_length=5, verbose_name='Camera mount size height')),
                ('camera_mount_width', models.FloatField(help_text='Width of the camera in mm', max_length=5, verbose_name='Camera mount size width')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='camera_details', to='components.frame')),
            ],
            options={
                'verbose_name': 'Frame Camera Detail',
                'verbose_name_plural': 'Frame Camera Details',
                'db_table': 'components_frame_camera_detail',
                'ordering': ('id',),
                'unique_together': {('frame', 'camera_mount_height', 'camera_mount_width')},
            },
        ),
        migrations.CreateModel(
            name='FrameMotorDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('motor_mount_height', models.FloatField(help_text='Height of the motor in mm', max_length=5, verbose_name='Motor mount size height')),
                ('motor_mount_width', models.FloatField(help_text='Width of the motor in mm', max_length=5, verbose_name='Motor mount size width')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='motor_details', to='components.frame')),
            ],
            options={
                'verbose_name': 'Frame Motor Detail',
                'verbose_name_plural': 'Frame Motor Details',
                'db_table': 'components_frame_motor_detail',
                'ordering': ('id',),
                'unique_together': {('frame', 'motor_mount_height', 'motor_mount_width')},
            },
        ),
        migrations.CreateModel(
            name='FrameVTXDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vtx_mount_height', models.FloatField(help_text='Height of the vtx in mm', max_length=5, verbose_name='VTX mount size height')),
                ('vtx_mount_width', models.FloatField(help_text='Width of the vtx in mm', max_length=5, verbose_name='VTX mount size width')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vtx_details', to='components.frame')),
            ],
            options={
                'verbose_name': 'Frame VTX Detail',
                'verbose_name_plural': 'Frame VTX Details',
                'db_table': 'components_frame_vtx_detail',
                'ordering': ('id',),
                'unique_together': {('frame', 'vtx_mount_height', 'vtx_mount_width')},
            },
        ),
        migrations.CreateModel(
            name='MotorDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.FloatField(help_text='Motor weight in grams', validators=[django.core.validators.MinValueValidator(0)])),
                ('max_power', models.IntegerField(help_text='Max power, W', validators=[django.core.validators.MinValueValidator(0)])),
                ('kv_per_volt', models.IntegerField(help_text='KV per volt', validators=[django.core.validators.MinValueValidator(0)], verbose_name='KV per volt')),
                ('peak_current', models.FloatField(blank=True, help_text='Peak current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('idle_current', models.FloatField(blank=True, help_text='Idle current of the motor, A', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('resistance', models.FloatField(blank=True, help_text='Resistance, in mΩ (mOhm)', null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Internal Resistance')),
                ('motor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', to='components.motor')),
                ('voltage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rated_voltage', to='components.ratedvoltage')),
            ],
            options={
                'verbose_name': 'Motor Detail',
                'verbose_name_plural': 'Motor Details',
                'db_table': 'components_motor_details',
                'unique_together': {('motor', 'kv_per_volt')},
            },
        ),
        migrations.CreateModel(
            name='ReceiverDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('frequency', models.FloatField(help_text='Frequency, in Mhz', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Frequency')),
                ('weight', models.FloatField(help_text='Weight in grams, without Antenna', validators=[django.core.validators.MinValueValidator(0)])),
                ('telemetry_power', models.FloatField(help_text='Telemetry Power, In dBm', validators=[django.core.validators.MinValueValidator(0)])),
                ('rf_chip', models.CharField(blank=True, help_text='RF Chip Number', max_length=50, null=True)),
                ('receiver', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='details', to='components.receiver')),
            ],
            options={
                'verbose_name': 'Receiver Detail',
                'verbose_name_plural': 'Receiver Details',
                'db_table': 'components_receiver_detail',
                'ordering': ['receiver', 'frequency', 'weight', 'telemetry_power', 'rf_chip'],
                'unique_together': {('receiver', 'frequency')},
            },
        ),
    ]
